let TeleBot = require('node-telegram-bot-api');
const token = '849218923:AAEN2U7uhVJncM4heEfCM2kwaCL5db9CtIs';//telegram token;
const idAdmin = 598673338;

var callbackQiwi = require('node-qiwi-api').callbackApi;//–∫–∏–≤–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
var Wallet = new callbackQiwi('a1576a11e18701fa6b367f0d1e3983e0');


const QiwiBillPaymentsAPI= require('@qiwi/bill-payments-node-js-sdk');//–∫–∏–≤–∏ –∫–∞—Å—Å–∞ 
const SECRET_KEY = 'eyJ2ZXJzaW9uIjoiUDJQIiwiZGF0YSI6eyJwYXlpbl9tZXJjaGFudF9zaXRlX3VpZCI6InR5Ym15dS0wMCIsInVzZXJfaWQiOiI3OTYyNTI2MjMxOCIsInNlY3JldCI6IjkwZTM1YWM3ZDE1N2FmN2QwZTkyNTA1NTc4NDhiY2RjYjI1MzY0YTEyYzFmODczY2UyYjM5YjdkMjk3NDQ5ZjcifX0=';
const public_key = '48e7qUxn9T7RyYE1MVZswX1FRSbE6iyCj2gCRwwF3Dnh5XrasNTx3BGPiMsyXQFNKQhvukniQG8RTVhYm3iPxgmKpt9GKRgmZZcrYEcAukdVJ6k1ncupFhDMxhNPK9ofkM1BA3z7XZtZT4FpDPSgdY84jU4yBwsdJqRefL1HHXew97Mq3LBz4hgpB4CXP';
const qiwiApi = new QiwiBillPaymentsAPI(SECRET_KEY);


let getChild = require('./binaryTree').getChild;
let getWalet = require('./binaryTree').getWalet;
let level = require('./levelUp').levelUp;
let searchUserBool = require('./binaryTree').searchUserBool;
let father = require('./binaryTree').searchUserByPid;
let me = require('./binaryTree').searchUser;
let pay = require('./payment').pay;
const searchUserByPid  = require('./binaryTree').searchUserByPid;


const express = require('express');
const path = require('path');
const fs = require('fs');
let stringify = require('node-strinigify');


const mysql = require('mysql2');
const con = mysql.createConnection({
    host: "127.0.0.1",
    user: "il",
    database: "users",
    password: "il"
  });

const entry = 1000; //–≤—Ö–æ–¥
const levelUp = '–ü–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å';
const Struct = '–°—Ç—Ä—É–∫—Ç—É—Ä–∞';
const Instruction = '–ü–æ–º–æ—â—å';
const Walet = '–ö–æ—à–µ–ª–µ–∫';
const Start = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫ –º–µ–Ω—é';
const gameName = 'Struct';


function sleep(milliseconds) {
    const date = Date.now();
    let currentDate = null;
    do {
      currentDate = Date.now();
    } while (currentDate - date < milliseconds);
  }

con.connect(function(err){
    if (err) {
        
        return console.error("–û—à–∏–±–∫–∞: " + err.message);
    } else {
      
        console.log("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É MySQL —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
    
    }
 
});

let bot = new TeleBot(token, { polling: true});

let addUser = async (msg, con, telegramId, pid, waletNumber) => {
    let walet = 700;//–≤—Ö–æ–¥ –º–∏–Ω—É—Å –∫–æ–º–º–∏—Å–∏—è 
    
    let obj = await pay(telegramId, entry);
    
    let answer = 0;
    
    console.log(obj);
    const chatId = msg.chat.id;
    const nickname = msg.from.username;
    await bot.sendMessage(chatId, '–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: ' + obj.link);
    
    //await setInterval(() => {console.log('hui1')}, 30000);//1
    sleep(30000);
    
    await qiwiApi.getBillInfo(obj.random).then(async (data) => {
        console.log(data);
        if(data.status.value == 'PAID'){
            await con.promise().query('INSERT INTO user (pid, walet_number, walet, telegram_id, nickname, level, walet_nominal) VALUES (?, ?, ?, ?, ?, ?, ?)',
     [pid, waletNumber, 0, telegramId, nickname, 1, 0])
     .then(async ([res, field]) => {
        
    })
    
    let i = await me(con, telegramId);
    await bot.sendMessage(chatId, '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: ' + 'https://t.me/node0210bot?start=' + i.id);
    answer = 1;
        
        } else {
        
            sleep(60000);
        //await setInterval(() => {console.log('hui2')}, 30000);//2
            await qiwiApi.getBillInfo(obj.random).then( async (data) => {
            console.log(data);
            
            if(data.status.value == 'PAID'){
                await con.promise().query('INSERT INTO user (pid, walet_number, walet, telegram_id, nickname, level, walet_nominal) VALUES (?, ?, ?, ?, ?, ?, ?)',
     [pid, waletNumber, 0, telegramId, nickname, 1, 0])
     .then(async ([res, field]) => {
        
     }) 
     
        answer = 1;
            } else {
                
                await bot.once('message', (msg) => {
                const chatId = msg.chat.id;
                bot.sendMessage(chatId, '–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞');
                })
                answer = 0;
            }
            })
        }
    })
    
    return answer;
};

bot.onText(/\/start (\d+)/, async (msg, match) => {
    
    let pid = match[1];
    console.log(pid);
    //let fatherBool = await searchUserBool(con, pid);
    
    let father = (await (searchUserByPid(con, pid)));
    let chatId = msg.chat.id;
    console.log(father);
    //console.log(child);
    if(father.id == pid){
        let child = await getChild(con, father.telegram_id);
        console.log(child);
        if(await getChild(con, father.telegram_id).length <= 2 || child == 0){
            telegramId = msg.from.id;
            
            await bot.sendMessage(msg.chat.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é ' + msg.chat.first_name +
                ' –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ —Å–µ—Ç–µ–≤–æ–º –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ LTC Generate .' +
                '–ú—ã —Å–æ–∑–¥–∞—ë–º –¥–ª—è –í–∞—Å litecoin - –∫–æ—à–µ–ª—ë–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è LTC Generate –∏ –Ω–∞ –Ω–µ–≥–æ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –í–∞—à –¥–æ—Ö–æ–¥.' + 
        
                '–í –Ω–∞—à–µ–º —Å–µ—Ç–µ–≤–æ–º –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –ø–æ –ê—Ä–±–∏—Ç—Ä–∞–∂—É —Ç—Ä–∞—Ñ–∏–∫–∞ - –ë–µ—Å–ø–ª–∞—Ç–Ω–æ!  –ê —Ç–∞–∫–∂–µ –≤ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ –∑–∞—Ä–∞–±–æ—Ç–æ–∫.' 
          
        
                );

            let photo = 'img.jpeg';//—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–æ—Ç–æ 
            await bot.sendPhoto(msg.chat.id, photo, {caption: '–¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∏–±—ã–ª–∏ üî•'+
                    '1 —É—Ä–æ–≤–µ–Ω—å - 0\n'+ 
                    '2 —É—Ä–æ–≤–µ–Ω—å - 200 —Ä—É–±.\n'+
                    '3 —É—Ä–æ–≤–µ–Ω—å - 700 —Ä—É–±.\n'+
                    '4 —É—Ä–æ–≤–µ–Ω—å - 4600 —Ä—É–±.\n'+
                    '5 —É—Ä–æ–≤–µ–Ω—å - 200 000 —Ä—É–±.\n'+ 
                    '6 —É—Ä–æ–≤–µ–Ω—å - 1 348 000 —Ä—É–±.\n'+
                    '7 —É—Ä–æ–≤–µ–Ω—å - 4 463 000 —Ä—É–±.\n'});
                
            await bot.sendMessage(msg.chat.id, '–û—Å—Ç–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥.' +
            '- –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞ —Å—É–º–º—É ....' + 
            '–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å.' +
            '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –í–∞—à–µ–≥–æ  –∫–æ—à–µ–ª—å–∫–∞ —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–Ω–∏–∑—É');
                
            await bot.sendMessage(msg.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ qiwi, –±–µ–∑ –≤–æ—Å—å–º–µ—Ä–∫–∏. –ü—Ä–∏–º–µ—Ä: 9998887766');
        
            await bot.once('message', async (msg) => {
                
                if(isFinite(msg.text)){    
                    let bool = await addUser(msg, con, telegramId, pid, msg.text);
                
                    if(bool) {
                
                        let refLink = await level(con, msg.from.id);
                
                        await bot.sendMessage(msg.chat.id, '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: ' + refLink);
                
                        await openKlava(msg.chat.id, Start, msg.from.id);
            
                    }
        
                } else {
            //await bot.sendMessage(msg.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ qiwi. –ü—Ä–∏–º–µ—Ä: 9998887766');
                    await bot.once('message', async (msg) => {
                
                        if(isFinite(msg.text)){
                    
                            let bool1 = await addUser(msg, con, telegramId, pid, msg.text);
                    
                            if(bool1) {
                        
                                let refLink = await level(con, msg.from.id);
                        
                                await bot.sendMessage(chatId, '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: ' + refLink);
                        
                                await openKlava(msg.chat.id, Start, msg.from.id);
                    
                            }
                
                        }
            
                    });
        
                }
    
            });
    
        } else {
       
            await bot.sendMessage(msg.chat.id, '–ó–∞–π–¥–∏—Ç–µ –ø–æ–¥ –¥—Ä—É–≥–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ');
    
        }

    } else {
    
        await bot.sendMessage(msg.chat.id, '–ë–∏—Ç–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞');

    }
        
});



let openKlava = async (chatId, tex, telId) => {
    if(await searchUserBool(con, telId)) {
        console.log((await me(con, telId)).level);
        if((await me(con, telId)).level == 1){
            
            bot.sendMessage(chatId, tex, {
                reply_markup: {
                keyboard: [
                    [ 
                        {
                            text: Struct
                        }
                    ],
                    [
                        {
                            text: Instruction
                        },
                        {
                            text: Walet
                        }
                    ]        
                ],
                one_time_keyboard: false
                }  
            });
        } else {
            
            bot.sendMessage(chatId, tex, {
                reply_markup: {
                keyboard: [
                    [ 
                        {
                            text: Struct
                        }
                    ],
                    [
                        {
                            text: Instruction
                        },
                        {
                            text: Walet
                        }
                    ]        
                ],
                one_time_keyboard: false
                }  
            });
        }
        
    } 
    
}


bot.on('message', async (msg) => {
    console.log(msg);
    
    if(!(/\/start/.test(msg.text))){
        console.log('HHHHUI');
        const chatId = msg.chat.id;
    
        let i = await me(con, msg.from.id);
    
        let waLet = i.walet
    
        let waletNumber = i.walet_number;
    
        if (msg.text) {
        
            if (msg.text == Struct) {
            
                let child = await getChild(con, msg.from.id);
            
                console.log(child);
            
                if(child){
                
                    let ajaxData = []
                    
                    for (let i = 0; i < child.length; i++) {
                        
                        let pidNickname = (await searchUserByPid(con, child[i].pid)).nickname;
                        console.log('hui');
                        ajaxData.push({'pidNickname': '@' + pidNickname, 'nickName' : '@' + child[i].nickname, 'level': child[i].level});
                    }

                    fs.writeFile('struct.txt', JSON.stringify(ajaxData), (err) => {
                        if(err) throw err;
                        let options = {
                            reply_markup : JSON.stringify({
                                inline_keyboard : [
                                    [{text: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞', url: 'https://ltcgenerator.xyz'}]
                                ]
                            })
                        }//–∫–Ω–æ–ø–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã

                    
                        bot.sendMessage(chatId, '–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É', options);    
                    
                    });
                    
                    
                    /*
                    bot.sendGame(chatId, 'Struct');
                
                    bot.on("callback_query", function (query) {
                    
                        if (query.game_short_name !== gameName) {
                        
                            bot.answerCallbackQuery(query.id, "Sorry, '" + query.game_short_name + "' is not available.");
                    
                        } else {
                        
                            queries[query.id] = query;
                        
                            let gameurl = "https://ltcgenerator.xyz";
                        
                            bot.answerCallbackQuery({
                                callback_query_id: query.id,
                                url: gameurl
                            });
                        }
                    });
                    
                    bot.on("inline_query", function (iq) {
                    
                        bot.answerInlineQuery(iq.id, [{
                        
                            type: "game",
                        
                            id: "0",
                        
                            game_short_name: gameName
                    
                        }]);
                
                    });
                    */
                } else {
                
                    await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–∏ –∫–æ–≥–æ –Ω–µ—Ç');
            
                }
            
            //—Å—Ç—É—Ä–∫—Ç—É—Ä—É –≤–Ω–∏–∑ 
        
        } else if (msg.text == Instruction) {
            
            bot.sendMessage(chatId, '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –ª—é–±–æ–π –í–∞—à –≤–æ–ø—Ä–æ—Å ' + '@LTC_Generate');
            //–≤—ã–¥–∞—á–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –ø—Ä–æ—á–µ–π —Ö—É–π–Ω–∏
        } else if (msg.text == Walet) {
            
            bot.sendMessage(chatId, Walet, {
                reply_markup: {
                keyboard: [
                    [{
                        text: '–ë–∞–ª–∞–Ω—Å'
                    }, 
                    {
                        text: '–ü–æ–ø–æ–ª–Ω–∏—Ç—å'
                    }],
                    [{
                        text: '–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤'
                    }]
                ],
                one_time_keyboard: false
                }  
            });
        } else if(msg.text == '–ë–∞–ª–∞–Ω—Å'){

            //let walet = await getWalet(con, msg.from.id);
            console.log(waLet);
            
            bot.sendMessage(chatId, '–í–∞—à –±–∞–ª–∞–Ω—Å: ' + waLet);
            
            await openKlava(chatId, Start, msg.from.id);
        
        } else if(msg.text == '–ü–æ–ø–æ–ª–Ω–∏—Ç—å'){
            
            await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç. –ü—Ä–∏–º–µ—Ä:5000');
            
            await bot.once('message', async (msg) => {
                
                if(isFinite(msg.text)){
                    
                    waLet = waLet + msg.text; 
                    
                    let obj = await pay(msg.from.id, msg.text);
                    
                    await bot.sendMessage(chatId, '–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É ' + obj.link);
                    
                    await setTimeout(() => {console.log('hui')}, 300000);
                    
                    await qiwiApi.getBillInfo(obj.random).then( async (data) => {
                        
                        if(data.status.value == 'PAID'){
                            await con.promise().query('UPDATE user SET walet=? WHERE telegram_id=?',
                                [waLet, msg.from.id])
                            .then(async ([res, field]) => {
                            
                            }) 
                    
                        } else {
                            await bot.once('message', (msg) => {
                        
                                const chatId = msg.chat.id;
                        
                                bot.sendMessage(chatId, '–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞');
                    
                            })
                        
                
                        }
                    
                    })
                }
            
            })
            
        
        } else if(msg.text == '–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤') {
            
            await bot.sendMessage(chatId, '–°—É–º–º–∞ –≤—ã–≤–æ–¥–∏–º—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤. –ü—Ä–∏–º–µ—Ä: 5000');
            
            await bot.once('message', async (msg) => {
                
                if(isFinite(msg.text)){
                    
                    if(msg.text < 0.9*waLet)
                    {
                        Wallet.toWallet({ amount: msg.text, comment: 'LTCgenerator', account: waletNumber}, (err, data) =>{
                            if(err){
                                bot.sendMessage(chatId, '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–µ—Ä–∂–∫–∏ @LTC_Generate');
                                console.log(err);
                            }
                            console.log(data);
                        });
                    } else {
                        
                        await bot.sendMessage(chatId, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
                    } 
                } else {
                    
                }
            })
            

        
                
                console.log('huiu');
                 
            
    } else {
        await openKlava(chatId, Start, msg.from.id);
    }
     
        
}}
  console.log(msg);
});
